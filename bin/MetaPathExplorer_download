#! /usr/bin/perl

=head1 NAME

            MetaPathExplorer_download

=head1 SYNOPSIS

How to used : 

    Download and make database 

        perl MetaPathExplorer_download --ini MetaPathExplorer.ini
		

=head1 DESCRIPTION

    MetaPathExplorer 

=head1 OPTIONS  
 
    The options for the program as as follows:
    
    Global options:

    -h	--help		Print this help and exit.

    -v	--verbose	Verbose mode. Can be used multiple times for increased
                	verbosity.

        --ini 		Option ini file for MetaPathExplorer.

    -f	--force		
    
    -r	--re-use	Use already downloaded files to make protein 
		            database. 

=head1 AUTHORS

HOCHART Corentin

=head1 VERSION

V 1.1 

=head1 DATE

Creation : 07.07.2017
Last modification : 07.07.2017

=cut

#×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
#libraries

use strict;
use warnings;

use Bio::SeqIO;
use Bio::SearchIO;
use Bio::Seq;
use Bio::Perl;
use Bio::SeqFeature::Generic;
use File::Copy;
use File::Basename;
use FindBin;
use Getopt::Long;
use HTML::Tree;
use List::Util qw(max min);
use List::MoreUtils qw(uniq);
use LWP::Simple;
use Pod::Usage;
use POSIX ":sys_wait_h";
use Time::Piece;
use Time::Seconds;


use lib "$FindBin::RealBin/../modules";
use Config::IniFiles;

# ×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
# scalars
#		global variables
my $help; 		# help flag
my $verbose;	# debugging flag
my $force;
my $reuse;

my $exe = $FindBin::RealScript;
my $version;
my $VERSION="1.1";
my $date=date();
my $REGEXP='(\d+[\.\w+]*\.\d+)';

my $MetaPathExplorer_CFG="$FindBin::RealBin/MetaPathExplorer.ini";
my $MetaPathExplorer_data="$FindBin::RealBin/../data/";

my $dlkingdom;

my $UniRefdb="$FindBin::RealBin/../data/orthology_UniRef100_arc-bac-vir.fasta";
my $databaseFile = '';

# ×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
# tables
my @kingdoms;
my @mol=('lsu','ssu','tsu');

# ×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
# hashes
my %OPT;
my %KO;

my %kingdoms = (
		'all' => {
			NAME => 'all',
			USE  => 0,
		},
		'arc' => {
			NAME => 'Archaea',
			USE  => 0,
			GC 	=> 11,
		},
		'bac' => {
			NAME => 'Bacteria',
			USE  => 0,
			GC 	=> 11,
		},
		'euk' => {
			NAME => 'Eukaryota',
			USE  => 0,
		},
		'vir' => {
			NAME => 'Viruses',
			USE  => 0,
			GC 	=> 1,
		},
	);
		
my %tools = (
	# Proteic annotation
	'blastp' => {
		GETVERSION  => "blastp -version 2>&1 | grep -i '^blastp'",
		REGEXP  => qr/($REGEXP)/,
		REQUIRED => 0,
		MAKE => "makeblastdb -in %d -dbtype prot -title %d",
	},
	'blastx' => {
		GETVERSION  => "blastx -version 2>&1 | grep -i '^blastp'",
		REGEXP  => qr/($REGEXP)/,
		REQUIRED => 0,
		MAKE => "makeblastdb -in %d -dbtype prot -title %d",
	},
	'usearch' => {
		GETVERSION  => "usearch 2>&1 | grep -i '^usearch v'",
		REGEXP  => qr/($REGEXP)/,
		REQUIRED => 0,
		MAKE => "usearch -makeudb_ublast %d -output %d.udb",
	},
	'diamond' => {
		GETVERSION  => "diamond -v 2>&1 | grep -i '^diamond v'",
		REGEXP  => qr/($REGEXP)/,
		REQUIRED => 0,
		MAKE => "diamond makedb --in %d -d %d",
	},
);

my %PATH =("Cellular Processes" => "",
			"Environmental Information Processing" => "",
			"Genetic Information Processing" => "",
			"Human Diseases" => "",
			"Metabolism" => "",
			"Organismal Systems" => ""
);

# ×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
# functions

sub error {
	# management of error messages and help page layout, will stop execution
	# local arguments passed:1st, error message to output
	my $error = shift;
	open (LOG,">>MetaPathExplorer.log");
	print LOG $error,"\n";
	close LOG;
	my $filename = ($0);
	pod2usage(-message => "$filename (error): $error. Execution halted.", -verbose => 2, -noperldoc => 1);
	exit(2);
}

sub warning {
	# management of warnings and execution carry on
	# local arguments passed: 1st, warning message to output
	my $message = "@_";
	if ($verbose) {
		my $filename = $0;
		warn("$filename (info): ".$message."\n");
	}
}

sub version {
  print STDERR "$exe $VERSION\n";
  exit;
}

sub downloadFile {
	foreach(@_){
		my $dbname=(split '/', $_)[-1];
		error("'$MetaPathExplorer_data/$dbname': file already. Use '--force' to erase early databse files.") if !$force && !$reuse && -e "$MetaPathExplorer_data/$dbname";
		warning("Re-using '$MetaPathExplorer_data/$dbname'") if $reuse && -f "$MetaPathExplorer_data/$dbname";
		next if $reuse && -f "$MetaPathExplorer_data/$dbname";
		runcmd("wget --no-verbose -O $MetaPathExplorer_data/$dbname $_");
	}
}

sub check_algorythm {
	if($_[0] eq 'blast+' || $_[0] eq 'diamond' || $_[0] eq 'usearch'){
		my $algorythm = $_[0];
		if ($algorythm eq 'blast+'){
			$algorythm = 'blastp' if $OPT{'seq'} eq 'contigs';
			$algorythm = 'blastx' if $OPT{'seq'} eq 'reads';
		}
		$tools{$algorythm}->{REQUIRED}=1;
		$OPT{'algorythm'}=$algorythm;
	}
	else{
		error("'$_[0]' wrong parameter for 'algorythm' option");
	}
}

sub check_tool {
	my $toolname=shift; 
	my $tool = $tools{$toolname};
	my $tool_path = find_exe($toolname);
	error("Can't find '$toolname' in your \$PATH") if !$tool_path and $tool->{REQUIRED} ;
	warning("Looking for $toolname - found $tool_path");
	if ($tool->{GETVERSION}) {
      my $s = qx($tool->{GETVERSION});
      if (defined $s) {
        $s =~ $tool->{REGEXP};
        $tool->{VERSION} = $1 if defined $1;
        warning("Determined $toolname version is $tool->{VERSION}");
		}
	}
}

sub check_all_tools {
	$ENV{"GREP_OPTIONS"} = '';  
	for my $toolname (sort keys %tools) {
		next unless $tools{$toolname}->{REQUIRED};
		check_tool($toolname);
	}
}

sub clean_up { 
	foreach my $file (@_){
		if(-e $file){
			warning("clean_up(): Deleting file '$file'");
			unlink ($file);
		}
	}
}

sub date { 
  my $time = shift || time; 
  my ( $seconde, $minute, $hour, $day, $month, $year, $week_day, $year_day, $summer_or_winter_hour ) 
    = localtime($time); 
  $month  += 1; 
  $year += 1900; 

  foreach ( $seconde, $minute, $hour, $day, $month, $year ) { 
    s/^(\d)$/0$1/; 
  } 
  
  my %ladate = ( 
    "date"         => "$day-$month-$year", 
  ); 
  return \%ladate; 
}

sub fasta_format {
	my $seq=shift;
	$seq=~s/(.{60})/$1\n/g;
	chomp $seq;
    return $seq;
}

sub find_exe {
	my($tool) = shift;
	for my $dir (File::Spec->path) {
		my $exe = File::Spec->catfile($dir, $tool);
		return $exe if -x $exe; 
	}
	return;
}

sub runcmd {
  warning("Running:", @_);
  system(@_)==0 or error("Could not run command:", @_);
}



# ××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
# Get options

MAIN: {
	GetOptions(
			"Help|help|h" 			=> \$help,			#help flag
			"Verbose|verbose|v!" 	=> \$verbose,		#verbose flag
			"version!"				=> \$version,		#version flag
			"f|force!"				=> \$force,			#force flag
			"r|re-use!"				=> \$reuse,			#reuse flag
			"ini=s" 				=> \$MetaPathExplorer_CFG, 	#initialize options file
			
		);
	
	version() if ($version);
	
	if ($help) {
		pod2usage(-verbose => 2, -noperldoc => 1);
		exit;
	}

	pod2usage(-verbose => 99, -sections => "NAME", -noperldoc => 1, -exit => "NOEXIT" ) if ($verbose);
	my $user = $ENV{ USER };
	my $da=`date`;
	chomp $da;
	warning("Date : $da");	
	warning("Hi $user! Let's do some good jobs together.");
	warning("\nFirst check tools and options.\n");

# ××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
# Load options

tie my %ini, 'Config::IniFiles', (
		-file => $MetaPathExplorer_CFG
	);

foreach my $section (keys %ini){
	next if $section ne 'Inputs';
	foreach my $parameter (keys %{$ini{$section}}){
		my $value=$ini{$section}{$parameter};
		$OPT{$parameter}=$value;
	}
}

$tools{$ini{'Proteic'}{'algorythm'}}->{REQUIRED}=1;

@kingdoms=split(/,/,$OPT{kingdoms});
error("Wrong parameter for 'kingdoms' option") if($OPT{kingdoms}=~/all/ && $#kingdoms>1);
foreach(@kingdoms){
	error("'$_' : incorrect paramameter for 'kingdoms' option") unless exists $kingdoms{$_};
	$kingdoms{$_}->{USE}=1;
}

error("UniRef identity must be 50, 90 or 100") unless(grep {$OPT{'UniRefID'} eq $_} split(/\|/, '50|90|100'));


warning('Databases dowloading and preparation, it will take a while. Please be patient.');

# ×××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××× 
warning('Recover KEGG data.');
# download KEGG data

my %currentK0 ;

warning('Download KEGG Orthology and KEGG Pathway equivalences.');
# Download ko and pathway equivalence
unless($reuse){
	open(IN, 'wget --no-verbose -O - http://rest.kegg.jp/link/pathway/ko |');
	open(OUT, ">$MetaPathExplorer_data/KEGG_orthology2pathway.tsv");
	while(<IN>) {
		chomp;
		my ($orthology, $pathway) = split(/\t/);
		$orthology =~ s/^ko://;
		$pathway =~ s/^path://;
		if($pathway =~ /^map[0-9]+$/) {
			print OUT join("\t", $orthology, $pathway), "\n";
		}
	}
	close(IN);
	close(OUT);

	warning('Download KEGG Orthology list with definition and reconstruct KEGG Brite Hierarchy + recover KEGG associated module.');
	# Download KEGG Orthology list and reconstruct KEGG Brite Hierarchy + recover KEGG associated module
	my $ko2module = $MetaPathExplorer_data.'/ko2module.tsv';
	my $ko2hierarchy = $MetaPathExplorer_data.'/ko2hierarchy.tsv';

	open(KO2MOD,">$ko2module");
	print KO2MOD "KO\tname;definition\tmodule\n";
	close KO2MOD;

	open(KO2HIER, ">$ko2hierarchy");
	print KO2HIER "KO\tBRITE[BR]\tlvl1\tlvl2\tPATHWAY[PATH]\tname;definition\n";
	close KO2HIER;
	runcmd("wget --no-verbose -O - http://rest.kegg.jp/list/ko > $MetaPathExplorer_data/KEGG_orthology.txt");
	open(IN, "$MetaPathExplorer_data/KEGG_orthology.txt");
	while(<IN>) {
		chomp;
		my ($orthology, $definition) = split(/\t/);
		$orthology =~ s/^ko://;
		$currentK0{$orthology}='';
		
		my ($DB,$entry,$name);
		$definition="";
		my $module="";
		my $BRITE;
		my ($lvl1,$lvl2,$lvl3);
		my $path;
		my $KO;
		my $lvl=0;
		my $statue="n";
		open(K0,"wget --no-verbose -O - http://togows.dbcls.jp/entry/pathway/$orthology |");
		while(my $line=<K0>){
			chomp $line;
			$DB=$1 if ($line=~m/^(\w+)/);
			if ($DB eq "ENTRY"){
				$line=~m/\s{2,}(\w+)\s+/;
				$entry=$1;
			}
			if ($DB eq "NAME"){
				$line=~m/\s{2,}([\w\(\)\[\]\:\s.;,\/\-\+]+)/;
				$name=$1;
			}
			if ($DB eq "DEFINITION"){
				$line=~m/\s{2,}([\w\(\)\[\]\:\s.;,\/\-\+]+)/;
				$definition=$1;
			}
			if ($DB eq "MODULE"){
				$line=~m/\s{2,}([\w\(\)\[\]\:\s.;,\/\-\+]+)/;
				$line=$1;
				open(KO2MOD,">>$ko2module");
				print KO2MOD "$entry\t$name;$definition\t$line\n";
				close KO2MOD;
			}
			if ($DB eq "BRITE"){
				$line=~m/\s{2,}([\w\(\)\[\]\:\s.;,\/\-\+]+)/;
				$line=$1;
				if($line=~m/BR:ko/){$BRITE=$line;$lvl=0}
				elsif($BRITE eq "KEGG Orthology (KO) [BR:ko00001]"){
					if(exists $PATH{$line}){
						$lvl1=$line;
					}
					elsif($line=~m/^(\d+)/){
						$lvl3=$line;
						$path=$1;
						
					}
					elsif($line=~m/$entry/){
						$KO=$line;$lvl=0;
						open(KO2HIER, ">>$ko2hierarchy");
						print KO2HIER "$entry	$BRITE	$lvl1	$lvl2	$lvl3 [PATH:ko$path]	$name;$definition\n";
						close KO2HIER;
						$statue="y";
					}
					else{
						$lvl2=$line;
					}
				}
			}
			if (/^\//){
				if($statue eq "n"){
					open(KO2HIER, ">>$ko2hierarchy");
					print KO2HIER "$entry	-	-	-	-	$name;$definition\n";
					close KO2HIER;
				} 
			}
		}
		close(K0)
	}
	close(IN);

	warning('Download KEGG Pathway list with definition');
	runcmd("mkdir -p $MetaPathExplorer_data/HTML");
	open(IN, 'wget --no-verbose -O - http://rest.kegg.jp/list/pathway |');
	open(OUT, ">$MetaPathExplorer_data/KEGG_pathway.txt");
	open(HTMLSUM, ">$MetaPathExplorer_data/HTML/index-summary.html");
	while(<IN>) {
		chomp;
		my ($pathway, $definition) = split(/\t/);
		my $description;
		$pathway =~ s/^path://;
		open(INFO, "wget --no-verbose -O - http://rest.kegg.jp/get/$pathway |");
		while(<INFO>){
			chomp;
			if(/^DESCRIPTION\s+(.+)/){
				$description = $1 ;
			}
		}
		print OUT join("\t", $pathway, $definition,$description), "\n";
		printf HTMLSUM ("<li><a href=\"HTML/pathway/%s.html\" style=\"display:none;\">%s</a><br/><a style=\"display:none;\" name=\"description\">%s</a></li>\n",
		$pathway,$pathway,$definition);
	}
	close(IN);
	close(OUT);
	close(HTMLSUM);

	my $A=0;
	my $B=1;
	my $C=1;


	open (IN, "wget --no-verbose -O - http://rest.kegg.jp/get/br:08901 |");
	open (OUT, ">$MetaPathExplorer_data/HTML/index-main.html");
	while(<IN>){
		chomp;
		next if (/^#/);
		if(/^A(.+)/){
			print OUT "</ul></li></ul>\n</a></li>\n" if($A > 0);
			$A++;
			printf OUT ("<li><a name='A%s' href=\"javascript:visibilite('A%s')\" lvl='1'><img src=\"HTML/Fig/close.png\"></img> %s\n<ul id='A%s'>\n\t",
				$A,$A,$1,$A);
			$B=1;
			$C=1;
		}
		elsif(/^B\s+(.+)/){
			print OUT "\t</ul></li>\n\t" if($B > 1);
			printf OUT ("<li lvl='2' style=\"display:none;\"><a href=\"javascript:visibilite('A%sB%s');\"><img src=\"HTML/Fig/close.png\"> %s</a>\n\t<ul id='A%sB%s'>\n",
				$A,$B,$1,$A,$B);
			$B++;
			$C=1;
		}
		elsif(/^C\s+(\S+)\s+(\S+)/){
			printf OUT ("\t\t<li lvl='3' style=\"display:none;\"><a name=\"%s\" href=\"HTML/pathway/map%s.html\">%s</a><img class=\"popup\" src=\"http://www.kegg.jp/kegg/misc/thumbnail/map%s.gif\"> %s</li>\n",$1,$1,$1,$1,$2);
			$C++
		}
	}
	print OUT "</ul></li></ul>\n</a></li>";
	close IN;
	close OUT;
}
else {
	open(IN, "$MetaPathExplorer_data/KEGG_orthology.txt");
	while(<IN>) {
		chomp;
		my ($orthology, $definition) = split(/\t/);
		$orthology =~ s/^ko://;
		$currentK0{$orthology}='';
	}
	close IN;
}

#××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
warning('Recover UniRef data.');
# DL UniRef db

# scalars
my $UniReflvl="UniRef$OPT{UniRefID}";
my $UniRef_KEGG=$MetaPathExplorer_data."orthology_$UniReflvl.fasta";
my $url="ftp://ftp.uniprot.org/pub/databases/uniprot/uniref/uniref$OPT{uniref}/uniref$OPT{uniref}.fasta.gz";	
my $UniRef=$MetaPathExplorer_data."uniref$OPT{uniref}.fasta";

# hashes
my %UniRef2KO;
my %clst2acc;

warning('(Down)load UniRef Protein sequence file.');

downloadFile($url) unless -e $UniRef;

runcmd("gunzip $UniRef.gz") if -e "$UniRef.gz";
error("'$UniRef' has zero size") if(-z $UniRef);

my $in = Bio::SeqIO->new(	-format => 'fasta',
							-file   => "$UniRef",
						);

warning('(Down)load UniRef equivalence ID file.');
downloadFile('ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/idmapping/idmapping.dat.gz');
unless(-e "$MetaPathExplorer_data/idmapping.tsv" && -e "$MetaPathExplorer_data/$UniReflvl.cluster.tsv" && "$MetaPathExplorer_data/$UniReflvl.cluster.tsv.gz" && $reuse){	
	open IDMAP, "zcat $MetaPathExplorer_data/idmapping.dat.gz |";
	open (MAPOUT, ">$MetaPathExplorer_data/idmapping.tsv");
	open (UniRef100, ">$MetaPathExplorer_data/UniRef100.cluster.tsv");
	open (UniRef90, ">$MetaPathExplorer_data/UniRef90.cluster.tsv");
	open (UniRef50, ">$MetaPathExplorer_data/UniRef50.cluster.tsv");
	while(<IDMAP>){
		chomp;
		if(/(\w+)\t(UniRef\d+)\t(\w+)/){
			$clst2acc{$3}.="$1;" if $2 eq $UniReflvl;
			print UniRef100 join ("\t",$1,$2,$3),"\n" if $2 eq 'UniRef100';
			print UniRef90 join ("\t",$1,$2,$3),"\n" if $2 eq 'UniRef90';
			print UniRef50 join ("\t",$1,$2,$3),"\n" if $2 eq 'UniRef50';
		}
		if(/(\w+)\tKO\t(\w+)/){
			$UniRef2KO{$1}=$2;
			print MAPOUT join ("\t",$1,"KO",$2),"\n";
		}
	}
	close IDMAP;
	close MAPOUT;
	close UniRef100;
	close UniRef90;
	close UniRef50;
};
unless(%clst2acc or %UniRef2KO){
	warning("Re-using: '$MetaPathExplorer_data/idmapping.tsv'");
	open (MAP, "$MetaPathExplorer_data/idmapping.tsv");
	while(<MAP>){
		chomp;
		if(/(\w+)\tKO\t(\w+)/){
			$UniRef2KO{$1}=$2;
		}
	}
	close MAP;
	warning("Re-using: '$MetaPathExplorer_data/$UniReflvl.cluster.tsv'");
	runcmd("gunzip $MetaPathExplorer_data/$UniReflvl.cluster.tsv.gz") if -e "$MetaPathExplorer_data/$UniReflvl.cluster.tsv.gz";
	open (CLSTR, "$MetaPathExplorer_data/$UniReflvl.cluster.tsv");
	while(<CLSTR>){
		chomp;
		$clst2acc{$2}.="$1;" if(/(\w+)\t$UniReflvl\t(\w+)/);
	}
	close CLSTR;
}

warning('Print UniRef_K0 protein file.');
if($OPT{kingdoms} eq 'all'){
	my $outfile = Bio::SeqIO->new(	-format		=>'fasta',
									-file		=>">$UniRef_KEGG", 
					);
	while(my $seq = $in->next_seq() ){
		my $id=$seq->id;
		$id=~m/^\w+_(\w+)/;
		next unless exists $UniRef2KO{$1};
		next unless exists $currentK0{$UniRef2KO{$1}};
		$id="$UniRef2KO{$1}_$1";
		$seq->id($id);
		$seq->desc(undef);
		$outfile->write_seq($seq);	
	}

	runcmd("gzip $UniRef");
	warning("'$UniRef' : ready to be used.");
}	
else{
	# scalars
	my $AC;

	# hases
	my %AC2OC;
	my %ac2oc;
	my %outfiles;

	warning('Load taxonomic information for UniRef protein.');

	downloadFile(
		'ftp://ftp.uniprot.org/pub/databases/uniprot//current_release/knowledgebase/complete/uniprot_trembl.dat.gz',
		'ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.dat.gz'
	);
	
	# runcmd("cat <(zcat $MetaPathExplorer_data/uniprot_sprot.dat.gz) <(zcat $MetaPathExplorer_data/uniprot_trembl.dat.gz) > $MetaPathExplorer_data/uniprot_sprot_trembl.dat");
	
	error("'$MetaPathExplorer_data/uniprot_sprot_trembl_ac2oc.dat': file already. Use '--force' to erase early databse files.") 
		if !$force && !$reuse && -e "$MetaPathExplorer_data/uniprot_sprot_trembl_ac2oc.dat";
	
	warning("Re-using '$MetaPathExplorer_data/uniprot_sprot_trembl_ac2oc.dat'") unless !$reuse && -e "$MetaPathExplorer_data/uniprot_sprot_trembl_ac2oc.dat";
	
	unless(-e "$MetaPathExplorer_data/uniprot_sprot_trembl_ac2oc.tsv"){
		warning("Creating '$MetaPathExplorer_data/uniprot_sprot_trembl_ac2oc.tsv'");
		open (DAT, "$MetaPathExplorer_data/uniprot_sprot_trembl.dat");
		open (AC2OC, ">$MetaPathExplorer_data/uniprot_sprot_trembl_ac2oc.tsv");
		while(<DAT>){
			chomp;
			if (/^AC\s+(\w+)/){
				$AC = $1;
			}
			if (/^OC\s+(.+)[\.]/){
				# next if exists $AC2OC{$AC};
				$ac2oc{$AC}.= $1;
				if(/\.$/){
					print AC2OC join ("\t",$AC,$ac2oc{$AC}).'.',"\n";
					$AC2OC{$AC}.= (split /;/ ,$ac2oc{$AC})[0].';';
					$ac2oc{$AC}= '' ;
				}
				
			}
		}
		close DAT;
		close AC2OC;
	}
	
	unless(%AC2OC){
		open (AC2OC, "$MetaPathExplorer_data/uniprot_sprot_trembl_ac2oc.tsv");
		while(<AC2OC>){
			chomp;
			(my $AC,my $OC)=split(/\t/);
			$OC=~m/(\w+)[;\.]/;
			$AC2OC{$AC} .= "$1;";
		}
		close AC2OC;
	}
	
	my $K=join('-',@kingdoms);

	warning('Print UniRef_K0 protein file.');
	my $dbpath ="$MetaPathExplorer_data/orthology_$UniReflvl\_$K.fasta";
	my $outfile = Bio::SeqIO->new(
								-format	=>'fasta',
								-file	=>">$dbpath",
							);

	# my $discard = Bio::SeqIO->new(
	# 							-format	=>'fasta',
	# 							-file	=>">$MetaPathExplorer_data/discard.fasta",
	# 						);
	
	while(my $seq = $in->next_seq() ){
		my $id=$seq->id;
		$id=~m/^(\w+_(\w+))/;
		my @clstmb=split(/;/,$clst2acc{$id}) if $clst2acc{$id};
		$clstmb[0]=$1 unless $clst2acc{$id};
		my $state = 0 ;
		my @taxonomy;
		foreach(@clstmb){
			next unless exists $AC2OC{$_};
			my @AC2OC=split(/;/,$AC2OC{$_});
			foreach(@AC2OC){
				push @taxonomy, $_;
			}
		}
		foreach(uniq(@taxonomy)){
			my $name='';
			$name = 'arc' if $_ eq 'Archaea';
			$name = 'bac' if $_ eq 'Bacteria';
			$name = 'euk' if $_ eq 'Eukaryota';
			$name = 'vir' if $_ eq 'Viruses';
			next if $name eq '';
			$state = 1 if $kingdoms{$name}->{USE};
		}
		# unless ($state) {
		# 	$seq->desc(uniq(@taxonomy));
		# 	$discard->write_seq($seq);
		# }
		next unless $state;
		next unless exists $UniRef2KO{$2};
		next unless exists $currentK0{$UniRef2KO{$2}};
		$id="$UniRef2KO{$2}_$1";
		$seq->id($id);
		$seq->desc(undef);
		$outfile->write_seq($seq);
	}
	
	my $cmd ;
	
	$cmd = $tools{'blastp'}->{MAKE} if $tools{'blastp'}->{REQUIRED};
	$cmd = $tools{'blastx'}->{MAKE} if $tools{'blastx'}->{REQUIRED};
	$cmd = $tools{'usearch'}->{MAKE} if $tools{'usearch'}->{REQUIRED};
	$cmd = $tools{'diamond'}->{MAKE} if $tools{'diamond'}->{REQUIRED};
	$cmd =~ s/%d/$dbpath/g;
	
	runcmd($cmd);
	runcmd("gzip $UniRef");
	
	warning("'$dbpath' : ready to be used.");		
	
	warning('Files database are ready. You can start the analysis.');
}
warning('End of script.')

}